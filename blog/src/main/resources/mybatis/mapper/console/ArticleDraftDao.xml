<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sbsm.blog.dao.console.ArticleDraftDao">


    <insert id="insert" parameterType="com.sbsm.blog.entity.console.ArticleDraft">
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO `article_draft` (  `create_time`, `update_time`, `remark`, `del_flag`, `ar_id`, `title`, `descn`, `content`, `img_url`, `ad_id`, `is_new`, `cid` )
        VALUES
                                    (#{createTime}, #{updateTime}, #{remark}, #{delFlag}, #{arId}, #{title}, #{descn}, #{content}, #{imgUrl}, #{adId}, #{isNew}, cid )
    </insert>

    <insert id="saveArticleTagMapping" parameterType="com.sbsm.blog.entity.console.ArticleDraft">
             INSERT INTO `article_tag_mapping`(`ar_id`, `tid`) VALUES (#{arg0}, #{arg1})
    </insert>

    <update id="update" parameterType="com.sbsm.blog.entity.console.ArticleDraft">
        UPDATE `article_draft`
        SET 
        `update_time` = #{updateTime},
        `remark` = #{remark},
        `title` = #{title},
        `descn` = #{descn},
        `img_url` = #{imgUrl},
        `cid` = #{cid}
        WHERE
            `id` = #{id};
    </update>

    <update id="updateContent" parameterType="com.sbsm.blog.entity.console.ArticleDraft">
        UPDATE `article_draft`
        SET
        `update_time` = #{updateTime},
        `content` = #{content}
        WHERE
            `id` = #{id}
    </update>

    <delete id="delete">
      delete from `article_draft` where `id` = #{arg0}
    </delete>

    <delete id="deleteArticleTagMapping">
        delete from `article_tag_mapping` where `ar_id` = #{arg0}
    </delete>

    <update id="logicDelete">
         UPDATE `article_draft`
         SET
         `update_time` = now(),
         `del_flag`=true
        WHERE
         `id` = #{arg0}
    </update>



    <sql id="columns">
        `create_time` createTime, `update_time` updateTime, `is_new` isNew, `img_url` url, `img_url` imgUrl, `ar_id` arId, `ad_id` adId, `cid` c_id, `ar_id` ar_t_id, `ar_id` v_ar_id
    </sql>

    <select id="countByDelFlag" resultType="Integer">
        select count(*) from `article_draft` where  `del_flag`=#{arg0}
    </select>

    <resultMap id="resultMap" type="com.sbsm.blog.entity.console.ArticleDraft">
        <association property="category" column="c_id" select="com.sbsm.blog.dao.console.CategoryDao.findByCid"></association>
        <association property="file" column="url" select="com.sbsm.blog.dao.console.FileDao.findOneByUrl"></association>
        <collection property="tags" column="ar_t_id" select="com.sbsm.blog.dao.console.TagDao.findTagByArId"></collection>
        <collection property="avs" column="v_ar_id" select="com.sbsm.blog.dao.console.ArticleVersionDao.findByArId"></collection>
    </resultMap>
    



    <select id="findPage" resultMap="resultMap">
        select *, <include refid="columns" />, CONCAT(#{arg2.imgCallPrefixPath}, `img_url`) imgAbsUrl from `article_draft` where  `del_flag`=0
        order by `update_time` desc
        limit #{arg0}, #{arg1}
    </select>

    <select id="findOne" resultMap="resultMap">
        select *, <include refid="columns" />, CONCAT(#{imgCallPrefixPath}, `img_url`) imgAbsUrl from `article_draft`
        <where>
            `del_flag`=#{delFlag}
            <if test="id != null">
                and `id` = #{id}
            </if>
            <if test="arId != null and arId != ''">
                and `ar_id`= #{arId}
            </if>
        </where>
        limit 0,1
    </select>

    <select id="findByIds" resultMap="resultMap">
        select *, <include refid="columns" /> from `article_draft`
        where `id` in
        <foreach collection="array" open="(" separator="," close=")" item="item">
            #{item}
        </foreach>
    </select>

</mapper>